using EventEaseF.Components;
using EventEaseF.Services;
using EventEaseF.Data;
using EventEaseF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Components.Server;
using Microsoft.AspNetCore.ResponseCompression;
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

var builder = WebApplication.CreateBuilder(args);

// üîß –î–æ—Å—Ç—É–ø –¥–æ HttpContext
builder.Services.AddHttpContextAccessor();

// üîß –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö SQLite
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));
// üîß –°–µ—Ä–≤—ñ—Å —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–¥—ñ—è–º–∏
builder.Services.AddScoped<EventDbService>();


// üîê ASP.NET Core Identity ‚Äî –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–ª—è UserManager, SignInManager, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
builder.Services.AddIdentity<ApplicationUser, IdentityRole>(options =>
{
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequireDigit = true;
    options.Password.RequireUppercase = true;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequiredLength = 6;
})
.AddEntityFrameworkStores<ApplicationDbContext>()
.AddDefaultTokenProviders();

// ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ‚Äî –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Å—Ö–µ–º–∏
builder.Services.AddAuthorization();

// üîÑ Blazor –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
builder.Services.AddScoped<AuthenticationStateProvider, ServerAuthenticationStateProvider>();
builder.Services.AddCascadingAuthenticationState();
// üîÑ API –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏
builder.Services.AddControllers(); // –¥–ª—è API

builder.Services.AddHttpClient(); // ‚úÖ –¶–µ —Ä–µ—î—Å—Ç—Ä—É—î HttpClient –¥–ª—è —ñ–Ω‚Äô—î–∫—Ü—ñ—ó



// üß± Razor Components
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents()
    .AddInteractiveWebAssemblyComponents();

// üõ†Ô∏è Custom services ‚Äî –ø—ñ—Å–ª—è Identity
builder.Services.AddScoped<UserService>();
builder.Services.AddScoped<UserSessionService>();
builder.Services.AddScoped<ProtectedSessionStorage>();
// builder.Services.AddScoped<EventService>();
builder.Services.AddScoped<RegistrationService>();
builder.Services.AddScoped<AuthService>();

// üîß –õ–æ–≥—É–≤–∞–Ω–Ω—è
builder.Logging.SetMinimumLevel(LogLevel.Debug);
builder.Logging.AddConsole();
// üîß Razor Pages (–¥–ª—è –ø–æ–º–∏–ª–æ–∫)
builder.Services.AddRazorPages();


var app = builder.Build();

// üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–ª–µ–π —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    await IdentityInitializer.SeedRolesAsync(roleManager);
    await IdentityInitializer.SeedUsersAsync(userManager);
}

// üîß Middleware
if (app.Environment.IsDevelopment())
{
    app.UseWebAssemblyDebugging();
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Error", createScopeForErrors: true);
    app.UseHsts();
}

app.UseStaticFiles();
app.UseRouting();
app.UseHttpsRedirection();
app.MapControllers(); // –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó       // üî• –ø—ñ—Å–ª—è app.UseRouting()


app.UseAuthentication(); // ‚úÖ –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–¥ Authorization
app.UseAuthorization();
app.UseAntiforgery();

// üîó –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
// app.MapStaticAssets();
app.MapRazorPages(); // –î–ª—è –ø–æ–º–∏–ª–æ–∫
app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode()
    .AddInteractiveWebAssemblyRenderMode();

// üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ–¥—ñ–π

using (var scope = app.Services.CreateScope())
{
    var db = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await EventSeeder.SeedEventsAsync(db);
}




app.Run();
