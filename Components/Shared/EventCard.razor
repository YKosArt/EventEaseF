@using EventEaseF.Models
@using EventEaseF.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject RegistrationService RegistrationService
@inject AuthenticationStateProvider AuthStateProvider

<div class="card h-100 event-card @(Event.IsPast ? "opacity-75" : "")">
    @if (Event.IsPast)
    {
        <div class="card-header bg-secondary text-white text-center py-1">
            <small><i class="fas fa-history me-1"></i>Подія завершена</small>
        </div>
    }

    <div class="card-body d-flex flex-column">
        <div class="d-flex justify-content-between align-items-start mb-2">
            <h5 class="card-title mb-0">
                <i class="fas fa-calendar me-2 text-primary"></i>@Event.Name
            </h5>
            @if (Event.IsUpcoming)
            {
                <span class="badge bg-success">
                    <i class="fas fa-clock me-1"></i>Скоро
                </span>
            }
        </div>

        <p class="card-text text-muted mb-3">@Event.Description</p>

        <div class="mb-2">
            <small class="text-muted d-block">
                <i class="fas fa-calendar-alt me-2"></i>
                @Event.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("uk-UA"))
            </small>
            <small class="text-muted d-block">
                <i class="fas fa-clock me-2"></i>
                @Event.Date.ToString("HH:mm")
            </small>
        </div>

        <div class="mb-3">
            <small class="text-muted d-block">
                <i class="fas fa-map-marker-alt me-2"></i>
                @Event.Location
            </small>
        </div>

        <div class="mt-auto">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="progress flex-grow-1 me-3" style="height: 8px;">
                    <div class="progress-bar @GetProgressBarClass()"
                         role="progressbar"
                         style="width: @GetOccupancyPercentage()%"
                         aria-valuenow="@(Event.RegisteredUserIds?.Count ?? 0)"
                         aria-valuemin="0"
                         aria-valuemax="@Event.MaxParticipants">
                    </div>
                </div>
                <small class="text-muted fw-bold">
                    @(Event.RegisteredUserIds?.Count ?? 0)/@Event.MaxParticipants
                </small>
            </div>

            <div class="mb-3">
                <span class="badge @GetAvailabilityBadgeClass() fs-6 py-2 px-3 w-100">
                    @if (Event.IsFull)
                    {
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        <span>Місць немає</span>
                    }
                    else if (Event.AvailableSpots <= 5)
                    {
                        <i class="fas fa-hourglass-half me-1"></i>
                        <span>Залишилось @Event.AvailableSpots місць</span>
                    }
                    else
                    {
                        <i class="fas fa-check-circle me-1"></i>
                        <span>@Event.AvailableSpots вільних місць</span>
                    }
                </span>
            </div>

            <div class="card-actions">
                <button class="btn btn-primary" @onclick="ViewDetails">View Details</button>
            </div>
        </div>
    </div>

    @if (ShowActions && Event.IsUpcoming)
    {
        <div class="card-footer bg-transparent border-0 pt-0">
            <AuthorizeView>
                <Authorized>
                    @if (isRegistered)
                    {
                        <button class="btn btn-outline-danger w-100" @onclick="UnregisterFromEvent">
                            <i class="fas fa-times me-2"></i>Скасувати реєстрацію
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary w-100"
                                @onclick="RegisterForEvent"
                                disabled="@Event.IsFull">
                            @if (Event.IsFull)
                            {
                                <i class="fas fa-ban me-2"></i>
                                <span>Місць немає</span>
                            }
                            else
                            {
                                <i class="fas fa-user-plus me-2"></i>
                                <span>Зареєструватися</span>
                            }
                        </button>
                    }
                </Authorized>
                <NotAuthorized>
                    <a href="/login" class="btn btn-outline-primary w-100">
                        <i class="fas fa-sign-in-alt me-2"></i>Увійдіть для реєстрації
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    }
    else if (!Event.IsUpcoming && ShowActions)
    {
        <div class="card-footer bg-transparent border-0 pt-0">
            <button class="btn btn-secondary w-100" disabled>
                <i class="fas fa-check me-2"></i>Подія завершена
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public Event Event { get; set; } = new();
    [Parameter] public EventCallback<int> OnViewDetails { get; set; }
    [Parameter] public EventCallback<int> OnRegister { get; set; }
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public EventCallback OnEventChanged { get; set; }

    private bool isRegistered = false;
    private string currentUserId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    currentUserId = userId;
                    isRegistered = await RegistrationService.IsUserRegisteredAsync(currentUserId, Event.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EventCard] Initialization error: {ex.Message}");
        }
    }

    private async Task ViewDetails() =>
        await OnViewDetails.InvokeAsync(Event.Id);

    private async Task RegisterForEvent()
    {
        if (!string.IsNullOrEmpty(currentUserId))
        {
            var registration = new Registration
            {
                EventId = Event.Id,
                UserId = currentUserId,
                RegisteredAt = DateTime.UtcNow,
                RegistrationDate = DateTime.UtcNow,
                IsActive = true
            };

            var success = await RegistrationService.RegisterUserAsync(registration);
            if (success)
            {
                isRegistered = true;
                await OnEventChanged.InvokeAsync();
                StateHasChanged();
            }
        }
    }

    private async Task UnregisterFromEvent()
    {
        if (!string.IsNullOrEmpty(currentUserId))
        {
            var success = await RegistrationService.UnregisterFromEventAsync(currentUserId, Event.Id);
            if (success)
            {
                isRegistered = false;
                await OnEventChanged.InvokeAsync();
                StateHasChanged();
            }
        }
    }

    private double GetOccupancyPercentage()
    {
        var count = Event.RegisteredUserIds?.Count ?? 0;
        if (Event.MaxParticipants == 0) return 0;
        return Math.Round((double)count / Event.MaxParticipants * 100, 1);
    }

    private string GetProgressBarClass()
    {
        var percentage = GetOccupancyPercentage();
        return percentage switch
        {
            >= 90 => "bg-danger",
            >= 70 => "bg-warning",
            >= 50 => "bg-info",
            _ => "bg-success"
        };
    }

    private string GetAvailabilityBadgeClass()
    {
        if (Event.IsFull) return "bg-danger";
        if (Event.AvailableSpots <= 5) return "bg-warning";
        return "bg-success";
    }
}
